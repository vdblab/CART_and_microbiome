[["index.html", "CART microbiome analysis Chapter 1 Prerequisites", " CART microbiome analysis Anqi Dai 2021-07-14 Chapter 1 Prerequisites install.packages(&quot;bookdown&quot;) "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter 4. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2021) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],["fig-2.html", "Chapter 3 Fig 2 3.1 2B: stacked bar chart. 3.2 2C: alpha and beta diversity between CART patients and healthy volunteers", " Chapter 3 Fig 2 3.1 2B: stacked bar chart. library(tidyverse) library(vdbR) library(ggpubr) connect_database(&#39;~/dbConfig.txt&#39;) get_table_from_database(&quot;asv_annotation_blast_color_ag&quot;); # my table of the CART stool cohort stb &lt;- read_csv(&#39;data/amplicon/stool/combined_2_meta.csv&#39;) # get the counts from database and also the color for the asv counts_data &lt;- get_counts_subset(stb$sampleid) dat &lt;- counts_data %&gt;% select(asv_key:count_total, count_relative) %&gt;% left_join(asv_annotation_blast_color_ag %&gt;% select(asv_key,color_label_group_distinct), by = &quot;asv_key&quot;) # there are some ASVs that don&#39;t have a color with it, but can use the color for the genus level color_group &lt;- dat %&gt;% split(is.na(.$color_label_group_distinct)) # find the genus for these asv get_table_from_database(&#39;asv_annotation_blast_ag&#39;) no_color &lt;- color_group %&gt;% pluck(&#39;TRUE&#39;) %&gt;% distinct(asv_key) %&gt;% inner_join(asv_annotation_blast_ag %&gt;% select(asv_key, genus)) # find the colors for these genera genera_colors &lt;- no_color %&gt;% distinct(genus) %&gt;% inner_join(asv_annotation_blast_color_ag %&gt;% distinct(genus, color_label_group_distinct)) # the full df for the no color genera no_color_df &lt;- no_color %&gt;% left_join(genera_colors) no_color_df_full &lt;- color_group %&gt;% pluck(&#39;TRUE&#39;) %&gt;% select(-color_label_group_distinct) %&gt;% left_join(no_color_df %&gt;% select(- genus)) # so if the genus is unknown then it&#39;s gonna be assigned &quot;other&quot; gray color # the question is do we go one taxa level higher or make a new color base and shades for the new asv # after discussing with Tsoni, we decided that it&#39;s ok to assign gray to the unknown genus # merge the new no_color_df_full to the original df dat &lt;- bind_rows( no_color_df_full, color_group %&gt;% pluck(&#39;FALSE&#39;) ) dat %&gt;% write_csv(&#39;data/the_data_to_make_panel_B.csv&#39;) # the color palette (inherited from Ying, used in lots of project in our lab, the palette used in the NEJM paper Fig 2D https://www.nejm.org/doi/full/10.1056/NEJMoa1900623) asv_color_set &lt;- asv_annotation_blast_color_ag %&gt;% distinct(color,color_label_group_distinct,color_label_group,color_base) %&gt;% select(color_label_group_distinct, color) %&gt;% deframe() # calculate the beta diversity between the samples which deicide the order of the samples in the plot cbd &lt;- compute_beta_diversity_and_tsne(sampleid = dat$sampleid, taxonomy = dat$color_label_group_distinct, count = dat$count); #compute beta diversity cbd$compute_beta_diversity() ## Time:Composition_matrix: ## Time difference of 0.009845018 secs ## Time:Bray-Curtis matrix: ## Time difference of 0.002388954 secs #get beta diversity d_beta &lt;- cbd$get_betadiversity() #compute hierarchical cluster hc &lt;- hclust(as.dist(d_beta), method = &#39;complete&#39;) dend &lt;- as.dendrogram(hc) sample_dendogram_order &lt;- labels(dend) # dividing the samples to lower and higher diversity div_order &lt;- stb %&gt;% arrange(simpson_reciprocal) %&gt;% pull(sampleid) ### # how about splitting the above dendrogram order into the low and higher diversity groups div_med &lt;- median(stb$simpson_reciprocal) lower_samp &lt;- stb %&gt;% filter(simpson_reciprocal &lt;= div_med) %&gt;% pull(sampleid) lower_samp_o &lt;- sample_dendogram_order[sample_dendogram_order %in% lower_samp] higher_samp_o &lt;- sample_dendogram_order[!sample_dendogram_order %in% lower_samp] dat$sampleid = factor(dat$sampleid,levels = c(lower_samp_o, higher_samp_o)) ggplot(dat,aes(sampleid, count_relative, fill = color_label_group_distinct) ) + geom_bar(stat = &quot;identity&quot;, position=&quot;fill&quot;, width = 1) + theme_classic() + labs(title = &#39;&#39;, ylab = &#39;Relative counts&#39;) + theme(axis.text.x = element_text(angle = 90), axis.text.y = element_blank(), legend.position = &quot;none&quot;) + scale_fill_manual(values = asv_color_set) + ggsave(&#39;figs/amplicon/stacked_bar_sorted_with_hclust_lower_and_higher_diversity.pdf&#39;, width = 7, height = 5) 3.2 2C: alpha and beta diversity between CART patients and healthy volunteers 3.2.1 alpha diversity (Simpsonâ€™s reciprocal) library(vdbR) connect_database(&#39;~/dbConfig.txt&#39;) get_table_from_database(&quot;healthy_volunteers_ag&quot;) get_table_from_database(&quot;asv_alpha_diversity_ag&quot;) ## [1] &quot;table asv_alpha_diversity_ag is loaded and filtered for duplicates. Only the replicate of highest coverage is retained.&quot; # a total of 75 samples alpha &lt;- bind_rows( stb %&gt;% select(sampleid, simpson_reciprocal) %&gt;% mutate(grp = &#39;baseline_CART&#39;), asv_alpha_diversity_ag %&gt;% select(sampleid, simpson_reciprocal) %&gt;% inner_join(healthy_volunteers_ag %&gt;% select(sampleid), by = &quot;sampleid&quot;) %&gt;% mutate(grp = &#39;healthy&#39;) ) %&gt;% distinct(sampleid, .keep_all = T) alpha %&gt;% ggboxplot(x = &#39;grp&#39;, y = &#39;simpson_reciprocal&#39;, add = &#39;jitter&#39;, title = &#39;&#39;, ylab = &#39;Fecal diversity (Simpson Reciprocal)&#39;, xlab = &#39;&#39;, palette = c(&#39;#ED0000&#39;,&#39;#00468B&#39;)) + stat_compare_means(comparisons= list(c(&#39;healthy&#39;, &#39;baseline_CART&#39;)), label= &quot;p.format&quot;, method= &#39;wilcox.test&#39;) 3.2.2 beta diversity (PCOA of Bray-Curtis) library(vdbR) connect_database(&#39;~/dbConfig.txt&#39;) healthy &lt;- healthy_volunteers_ag %&gt;% inner_join(asv_alpha_diversity_ag, by = c(&quot;sampleid&quot;, &quot;oligos_id&quot;)) cts &lt;- get_counts_subset(c(stb$sampleid, healthy %&gt;% pull(sampleid))) # a total of 75 samples counts. there are 3 healthy samples I don&#39;t have count . nsamp &lt;- cts %&gt;% distinct(sampleid) %&gt;% nrow all_pheno &lt;- bind_rows(healthy %&gt;% select(sampleid) %&gt;% mutate(grp = &#39;healthy&#39;, center = &#39;healthy&#39;), stb %&gt;% select(sampleid, center) %&gt;% mutate(grp = &#39;CART&#39;) %&gt;% select(sampleid, grp, center) ) %&gt;% ungroup %&gt;% distinct(sampleid, .keep_all = T) %&gt;% inner_join(asv_alpha_diversity_ag %&gt;% distinct(sampleid, .keep_all = T) %&gt;% distinct(path_pool, sampleid)) # filter &gt;0.01% in more than 25% samples keepa &lt;- cts %&gt;% filter(count_relative &gt; 0.0001) %&gt;% count(asv_key) %&gt;% filter(n &gt; floor(nsamp * 0.25)) %&gt;% pull(asv_key) cts_fil &lt;- cts %&gt;% filter(asv_key %in% keepa) %&gt;% select(sampleid, asv_key,count_relative ) %&gt;% spread(key = &#39;asv_key&#39;, value = &#39;count_relative&#39;, fill = 0) %&gt;% column_to_rownames(&#39;sampleid&#39;) library(vegan) dist_ &lt;- vegdist(cts_fil, method = &#39;bray&#39;) eigen &lt;- pcoa(dist_)$values$Eigenvalues percent_var &lt;- signif(eigen/sum(eigen), 3)*100 bc &lt;- cmdscale(dist_, k = 2) bc %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;sampleid&#39;) %&gt;% ungroup() %&gt;% inner_join(all_pheno) %&gt;% distinct() %&gt;% ggscatter(x = &#39;V1&#39;, y = &#39;V2&#39;, color = &#39;grp&#39;) + labs(title = &#39;PCOA of healthy and CART patients&#39;) + xlab(paste0(&quot;PC 1 [&quot;,percent_var[1],&quot;%]&quot;)) + ylab(paste0(&quot;PC 2 [&quot;,percent_var[2],&quot;%]&quot;)) + #theme_void() + ggsave(&#39;figs/PCOA(bray-curtis) of healthy and CART patients.pdf&#39;) # a pcoa at asv level to show they are from different pools and well mixed cts &lt;- get_counts_subset(c(stb$sampleid)) # filter &gt;0.01% in more than 25% samples keepa &lt;- cts %&gt;% filter(count_relative &gt; 0.0001) %&gt;% count(asv_key) %&gt;% filter(n &gt; floor(nsamp * 0.25)) %&gt;% pull(asv_key) cts_fil &lt;- cts %&gt;% filter(asv_key %in% keepa) %&gt;% select(sampleid, asv_key,count_relative ) %&gt;% spread(key = &#39;asv_key&#39;, value = &#39;count_relative&#39;, fill = 0) %&gt;% column_to_rownames(&#39;sampleid&#39;) dist_ &lt;- vegdist(cts_fil, method = &#39;bray&#39;) eigen &lt;- pcoa(dist_)$values$Eigenvalues percent_var &lt;- signif(eigen/sum(eigen), 3)*100 bc &lt;- cmdscale(dist_, k = 2) mp &lt;- bc %&gt;% as.data.frame() %&gt;% rownames_to_column(&#39;sampleid&#39;) %&gt;% ungroup() %&gt;% inner_join(all_pheno) %&gt;% distinct(sampleid, .keep_all = T) %&gt;% mutate(pool = str_extract(path_pool, &#39;Sample.+/&#39;)) %&gt;% mutate(pool = str_replace(pool, &#39;Sample_&#39;,&#39;&#39;)) %&gt;% mutate(pool = if_else(str_detect(pool, &#39;IGO&#39;), str_extract(pool, &#39;IGO.+$&#39;), pool)) %&gt;% mutate(pool = str_replace(pool, &#39;_1/|_comple.+$&#39;,&#39;&#39;)) mp %&gt;% ggscatter(x = &#39;V1&#39;, y = &#39;V2&#39;, color = &#39;pool&#39;, size = 3) + labs(title = &#39;PCOA of CART patients&#39;) + xlab(paste0(&quot;PC 1 [&quot;,percent_var[1],&quot;%]&quot;)) + ylab(paste0(&quot;PC 2 [&quot;,percent_var[2],&quot;%]&quot;)) + #theme_void() + ggsave(&#39;figs/PCOA(bray-curtis) (ASV level)of CART patients_pool.pdf&#39;, width = 9, height = 9) "],["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
